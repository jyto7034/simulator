{"message":"unused import: `crate::game::TimeManager`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\card_gen\\card_gen.rs","byte_start":6838,"byte_end":6862,"line_start":227,"line_end":227,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"    use crate::game::TimeManager;","highlight_start":9,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\card_gen\\card_gen.rs","byte_start":6834,"byte_end":6863,"line_start":227,"line_end":227,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    use crate::game::TimeManager;","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `crate::game::TimeManager`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\card_gen\\card_gen.rs:227:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::game::TimeManager;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::rc::Rc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\deck\\card.rs","byte_start":19,"byte_end":30,"line_start":2,"line_end":2,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use std::rc::Rc;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\deck\\card.rs","byte_start":15,"byte_end":31,"line_start":2,"line_end":2,"column_start":1,"column_end":17,"is_primary":true,"text":[{"text":"use std::rc::Rc;","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::rc::Rc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\deck\\card.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::rc::Rc;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `Deck`, `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\unit\\player.rs","byte_start":78,"byte_end":82,"line_start":4,"line_end":4,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"use crate::deck::{Cards, Deck, self};","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\unit\\player.rs","byte_start":84,"byte_end":88,"line_start":4,"line_end":4,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"use crate::deck::{Cards, Deck, self};","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\unit\\player.rs","byte_start":76,"byte_end":88,"line_start":4,"line_end":4,"column_start":24,"column_end":36,"is_primary":true,"text":[{"text":"use crate::deck::{Cards, Deck, self};","highlight_start":24,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Deck`, `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:4:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::deck::{Cards, Deck, self};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\n\n"}
{"message":"unused import: `graveyard_zone`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\unit\\player.rs","byte_start":286,"byte_end":300,"line_start":9,"line_end":9,"column_start":60,"column_end":74,"is_primary":true,"text":[{"text":"use crate::zone::{DeckZone, GraveyardZone, HandZone, Zone, graveyard_zone};","highlight_start":60,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\unit\\player.rs","byte_start":284,"byte_end":300,"line_start":9,"line_end":9,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"use crate::zone::{DeckZone, GraveyardZone, HandZone, Zone, graveyard_zone};","highlight_start":58,"highlight_end":74}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `graveyard_zone`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:9:60\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::zone::{DeckZone, GraveyardZone, HandZone, Zone, graveyard_zone};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\unit\\player.rs","byte_start":3818,"byte_end":3842,"line_start":163,"line_end":163,"column_start":50,"column_end":74,"is_primary":true,"text":[{"text":"            ZoneType::HandZone => Some(Rc::clone(&self.hand_zone.unwrap())),","highlight_start":50,"highlight_end":74}],"label":"expected `&Rc<RefCell<dyn Zone>>`, found `&Rc<RefCell<HandZone>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\unit\\player.rs","byte_start":3808,"byte_end":3817,"line_start":163,"line_end":163,"column_start":40,"column_end":49,"is_primary":false,"text":[{"text":"            ZoneType::HandZone => Some(Rc::clone(&self.hand_zone.unwrap())),","highlight_start":40,"highlight_end":49}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&std::rc::Rc<std::cell::RefCell<(dyn zone::zone::Zone + 'static)>>`\n   found reference `&std::rc::Rc<std::cell::RefCell<hand_zone::HandZone>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\blast\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","byte_start":4145,"byte_end":4150,"line_start":120,"line_end":120,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn clone(&self) -> Self;","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:163:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ZoneType::HandZone => Some(Rc::clone(&self.hand_zone.unwrap())),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&Rc<RefCell<dyn Zone>>`, found `&Rc<RefCell<HandZone>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14marguments to this function are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&std::rc::Rc<std::cell::RefCell<(dyn zone::zone::Zone + 'static)>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&std::rc::Rc<std::cell::RefCell<hand_zone::HandZone>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\blast\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs:120:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn clone(&self) -> Self;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `&std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>: zone::zone::Zone` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\unit\\player.rs","byte_start":3886,"byte_end":3924,"line_start":164,"line_end":164,"column_start":40,"column_end":78,"is_primary":true,"text":[{"text":"            ZoneType::DeckZone => Some(Rc::new(RefCell::new(&self.deck_zone))),","highlight_start":40,"highlight_end":78}],"label":"the trait `zone::zone::Zone` is not implemented for `&std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zone::zone::Zone`:\n  hand_zone::HandZone\n  deck_zone::DeckZone\n  graveyard_zone::GraveyardZone\n  EffectZone\n  UnitZone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for the cast from `std::rc::Rc<std::cell::RefCell<&std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>>>` to `std::rc::Rc<std::cell::RefCell<(dyn zone::zone::Zone + 'static)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `&std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>: zone::zone::Zone` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:164:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ZoneType::DeckZone => Some(Rc::new(RefCell::new(&self.deck_zone))),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zone::zone::Zone` is not implemented for `&std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `zone::zone::Zone`:\u001b[0m\n\u001b[0m              hand_zone::HandZone\u001b[0m\n\u001b[0m              deck_zone::DeckZone\u001b[0m\n\u001b[0m              graveyard_zone::GraveyardZone\u001b[0m\n\u001b[0m              EffectZone\u001b[0m\n\u001b[0m              UnitZone\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for the cast from `std::rc::Rc<std::cell::RefCell<&std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>>>` to `std::rc::Rc<std::cell::RefCell<(dyn zone::zone::Zone + 'static)>>`\u001b[0m\n\n"}
{"message":"the trait bound `std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>: zone::zone::Zone` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\unit\\player.rs","byte_start":3972,"byte_end":4014,"line_start":165,"line_end":165,"column_start":45,"column_end":87,"is_primary":true,"text":[{"text":"            ZoneType::GraveyardZone => Some(Rc::new(RefCell::new(self.graveyard_zone))),","highlight_start":45,"highlight_end":87}],"label":"the trait `zone::zone::Zone` is not implemented for `std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zone::zone::Zone`:\n  hand_zone::HandZone\n  deck_zone::DeckZone\n  graveyard_zone::GraveyardZone\n  EffectZone\n  UnitZone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for the cast from `std::rc::Rc<std::cell::RefCell<std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>>>` to `std::rc::Rc<std::cell::RefCell<(dyn zone::zone::Zone + 'static)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>: zone::zone::Zone` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:165:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ZoneType::GraveyardZone => Some(Rc::new(RefCell::new(self.graveyard_zone))),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zone::zone::Zone` is not implemented for `std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `zone::zone::Zone`:\u001b[0m\n\u001b[0m              hand_zone::HandZone\u001b[0m\n\u001b[0m              deck_zone::DeckZone\u001b[0m\n\u001b[0m              graveyard_zone::GraveyardZone\u001b[0m\n\u001b[0m              EffectZone\u001b[0m\n\u001b[0m              UnitZone\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for the cast from `std::rc::Rc<std::cell::RefCell<std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>>>` to `std::rc::Rc<std::cell::RefCell<(dyn zone::zone::Zone + 'static)>>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\unit\\player.rs","byte_start":4159,"byte_end":4178,"line_start":173,"line_end":173,"column_start":9,"column_end":28,"is_primary":true,"text":[{"text":"        &mut self.hand_zone","highlight_start":9,"highlight_end":28}],"label":"expected `&mut HandZone`, found `&mut Option<Rc<RefCell<HandZone>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\unit\\player.rs","byte_start":4134,"byte_end":4147,"line_start":172,"line_end":172,"column_start":40,"column_end":53,"is_primary":false,"text":[{"text":"    pub fn get_hand_zone(&mut self) -> &mut HandZone {","highlight_start":40,"highlight_end":53}],"label":"expected `&mut hand_zone::HandZone` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut hand_zone::HandZone`\n   found mutable reference `&mut std::option::Option<std::rc::Rc<std::cell::RefCell<hand_zone::HandZone>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:173:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_hand_zone(&mut self) -> &mut HandZone {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&mut hand_zone::HandZone` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &mut self.hand_zone\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&mut HandZone`, found `&mut Option<Rc<RefCell<HandZone>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut hand_zone::HandZone\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut std::option::Option<std::rc::Rc<std::cell::RefCell<hand_zone::HandZone>>>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\unit\\player.rs","byte_start":4253,"byte_end":4272,"line_start":177,"line_end":177,"column_start":9,"column_end":28,"is_primary":true,"text":[{"text":"        &mut self.deck_zone","highlight_start":9,"highlight_end":28}],"label":"expected `&mut DeckZone`, found `&mut Option<Rc<RefCell<DeckZone>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\unit\\player.rs","byte_start":4228,"byte_end":4241,"line_start":176,"line_end":176,"column_start":40,"column_end":53,"is_primary":false,"text":[{"text":"    pub fn get_deck_zone(&mut self) -> &mut DeckZone {","highlight_start":40,"highlight_end":53}],"label":"expected `&mut deck_zone::DeckZone` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut deck_zone::DeckZone`\n   found mutable reference `&mut std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:177:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_deck_zone(&mut self) -> &mut DeckZone {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&mut deck_zone::DeckZone` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &mut self.deck_zone\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&mut DeckZone`, found `&mut Option<Rc<RefCell<DeckZone>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut deck_zone::DeckZone\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut std::option::Option<std::rc::Rc<std::cell::RefCell<deck_zone::DeckZone>>>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\unit\\player.rs","byte_start":4357,"byte_end":4381,"line_start":181,"line_end":181,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        &mut self.graveyard_zone","highlight_start":9,"highlight_end":33}],"label":"expected `&mut GraveyardZone`, found `&mut Option<Rc<RefCell<...>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\unit\\player.rs","byte_start":4327,"byte_end":4345,"line_start":180,"line_end":180,"column_start":45,"column_end":63,"is_primary":false,"text":[{"text":"    pub fn get_graveyard_zone(&mut self) -> &mut GraveyardZone {","highlight_start":45,"highlight_end":63}],"label":"expected `&mut graveyard_zone::GraveyardZone` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut graveyard_zone::GraveyardZone`\n   found mutable reference `&mut std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\unit\\player.rs:181:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_graveyard_zone(&mut self) -> &mut GraveyardZone {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&mut graveyard_zone::GraveyardZone` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &mut self.graveyard_zone\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&mut GraveyardZone`, found `&mut Option<Rc<RefCell<...>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut graveyard_zone::GraveyardZone\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut std::option::Option<std::rc::Rc<std::cell::RefCell<graveyard_zone::GraveyardZone>>>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 6 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
