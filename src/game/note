# 멀리건 코드 ( 참고용으로만 )
        // player 을 언래핑 합니다.
        match (&self.player_1, &self.player_2) {
            (Some(player1), Some(player2)) => {
                // 카드를 Zone 에 저장하는 방식이 Zone 마다 다름.
                // Deck 의 경우 Count 로 카드 갯수를 관리하고
                // Hand 의 경우 카드 객체의 갯수로 관리함.
                // Hand 처럼 객체의 갯수로 관리하는 방법으로 통합해야됨.
                // 다만, player 의 v_cards 는 count 로 관리함.
                // 이에 따라, count 기능을 card 구조체로부터 분리해야할지 고민해야함.
                
                // 멀리건 단계 이전의 덱 카드 갯수를 기록합니다.
                let deck_before: (Vec<_>, Vec<_>) = (
                    player1
                        .as_ref()
                        .borrow_mut()
                        .get_zone(ZoneType::DeckZone)
                        .get_cards()
                        .v_card
                        .iter()
                        .map(|item| item.get_count().get())
                        .collect(),
                    player2
                        .as_ref()
                        .borrow_mut()
                        .get_zone(ZoneType::DeckZone)
                        .get_cards()
                        .v_card
                        .iter()
                        .map(|item| item.get_count().get())
                        .collect(),
                );

                // player1 의 deck 에서 랜덤한 카드 4장을 뽑습니다.
                let mullugun_cards_1 = player1
                    .as_ref()
                    .borrow_mut()
                    .draw(ZoneType::DeckZone, CardDrawType::Random(4))
                    .ok();

                // player2 의 deck 에서 랜덤한 카드 4장을 뽑습니다.
                let mullugun_cards_2 = player2
                    .as_ref()
                    .borrow_mut()
                    .draw(ZoneType::DeckZone, CardDrawType::Random(4))
                    .ok();

                // mullugun_cards 들을 언래핑합니다.
                match (mullugun_cards_1, mullugun_cards_2) {
                    (Some(cards_1), Some(cards_2)) => {
                        // mullugun_cards 들을 클라이언트들에게 보냅니다.

                        // 클라이언트들로부터 peak_card 정보를 받습니다.
                        // peak_card 는 멀리건에서 선택된 카드들의 집합입니다.
                        // 받은 정보를 토대로, 선택된 카드 i nj를 제외한 나머지는 다시 deck 에 넣습니다.
                        // 위 과정은 peak_card_put_back() 함수에서 처리합니다.
                        // 그리고 함수로부터 peak_card 를 반환받아, cards1, cards2 라는 변수들을 만들어 반환합니다.
                        let cards1 = player1
                            .as_ref()
                            .borrow_mut()
                            .peak_card_put_back(cards_1.clone())
                            .ok();
                        let cards2 = player2
                            .as_ref()
                            .borrow_mut()
                            .peak_card_put_back(cards_2.clone())
                            .ok();

                        // 선택된 카드들을 각 플레이어의 손패에 넣습니다.
                        match (cards1, cards2) {
                            (Some(cards1), Some(cards2)) => {
                                // cards1 를 순회하며 원본 카드를 가져와, clone 으로 손패에 넣습니다.
                                let action = |player: &Rc<RefCell<Player>>, cards: Vec<UUID>| {
                                    for card in cards {
                                        let card_origin = player
                                            .as_ref()
                                            .borrow_mut()
                                            .get_cards()
                                            .search(FindType::FindByUUID(card), 1);
                                        player
                                            .as_ref()
                                            .borrow_mut()
                                            .get_zone(ZoneType::HandZone)
                                            .get_cards()
                                            .push(card_origin.get(0).unwrap().clone());
                                        println!(
                                            "{} {}",
                                            player.as_ref().borrow().get_name(),
                                            card_origin.get(0).unwrap().get_name()
                                        );
                                    }
                                };

                                action(player1, cards1);
                                action(player2, cards2);
                            }
                            _ => return Err(Exception::CardError),
                        } // end of (cards1, cards2)
                    }
                    _ => return Err(Exception::CardError),
                } // end of (mullugun_cards_1, mullugun_cards_2)
            }
            _ => return Err(Exception::PlayerDataNotIntegrity),
        }; // end of (&self.player_1, &self.player_2)

    // --------------------------------------------------------
    // 파라미터로 넘어온 Vec<Card> 에서 카드 하나를 선택 후 나머지를 다시 패에 넣습니다.
    // --------------------------------------------------------
    // Exceptions:
    // - 카드가 4장이 아닌, 3장 이하일 때, 혹은 아예 없을 때.
    // - 카드가 게임에서 삭제 당했을때?
    // - 한 벡터에 같은 카드 두 장이 존재할 때, eg. 나머지 카드 추릴 때.
    // - 어떤 카드도 peak 하지 않았을때. _peak_card 에서 오류 나옴.
    // --------------------------------------------------------
    pub fn peak_card_put_back(
        &mut self,
        mullugun_cards: Vec<UUID>,
    ) -> Result<Vec<UUID>, Exception> {
        // 각 mullugun_cards 에서 카드 n장을 뽑습니다.
        // !! 일단 모든 카드를 선택하도록 만듬.
        let peaked_card = mullugun_cards.clone();

        // 나머지 카드를 추립니다.
        let remainder_cards: Vec<String> = peaked_card
            .iter()
            .cloned()
            .filter(|element| !mullugun_cards.contains(element))
            .chain(
                peaked_card
                    .iter()
                    .cloned()
                    .filter(|element| !mullugun_cards.contains(element)),
            )
            .collect();

        // 나머지 카드들의 uuid 로 player 의 DeckZone 에서 원본 카드를 찾아내어, count 를 증가시킵니다.
        for item in remainder_cards {
            if let Some(card) = self
                .deck_zone
                .get_cards()
                .v_card
                .iter_mut()
                .find(|card| card.get_uuid() == &item)
            {
                card.get_count_mut().increase();
            }
        }

        Ok(peaked_card)
    }



        let mut rng = rand::thread_rng();

        // 카드 index 정보를 vec 으로 만듭니다.
        // 이 벡터는 v_card 를 참조하기 위하여 생성됩니다.
        let mut available_indices: Vec<usize> = (0..self.v_card.len()).collect();
        let mut ans: Vec<Card> = vec![];
        let mut cnt = cnt as i32;
        // available_indices 가 비어있다면, 모든 카드를 참조한 것입니다.
        while !available_indices.is_empty() && cnt != 0 {
            // 무작위 기능을 사용하여 임의의 card index 를 하나 가져옵니다.
            let random_index = rng.gen_range(0..available_indices.len());
            let random_number = available_indices[random_index];

            // card index 로 해당 카드의 참조를 생성합니다.
            let card = &mut self.v_card[random_number];
            // 해당 카드의 사용 가능 횟수가 남아있는지 확인합니다.
            if !card.get_count().is_empty() {
                // 사용가능한 카드면 해당 카드의 사용 가능 횟수를 차감합니다.
                card.get_count_mut().decrease();
                cnt = -1;

                // ans 에 밀어넣습니다.
                ans.push(card.clone());
            } else {
                // 사용 가능 횟수가 0 인 카드이기 때문에, card index 벡터로부터 삭제합니다.
                available_indices.remove(random_index);
            }
        }