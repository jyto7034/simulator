feat(TestClient): Refactor ObserverActor to support per-player event tracking

- Replace single sequential event tracking with per-player HashMap structure
- Change `expected_sequence: Vec<ExpectEvent>` to `player_expectations: HashMap<Uuid, Vec<ExpectEvent>>`
- Change `current_step: usize` to `player_steps: HashMap<Uuid, usize>` for independent player progress
- Update ExpectEvent handler to store expectations per player ID
- Refactor InternalEvent handler with `check_player_expectations()` for individual player validation
- Add `check_all_players_completed()` to verify scenario completion only when all players finish
- Fix sequential step validation issue where Player1's events affected Player2's step progression
- Enable independent behavior validation for multiple players in scenarios

This change resolves the issue where ObserverActor treated multiple players as a single sequence,
causing premature scenario completion when the first player's events were satisfied.

## Known Issue Identified

During implementation, discovered a fundamental design contradiction:
- ExpectEvents are added incrementally as behavior methods execute
- Completion check only considers currently added ExpectEvents
- Results in premature scenario completion when first ExpectEvent is satisfied
- Documented in observer_actor_design_issue.md for future resolution

The per-player tracking structure is correct, but completion logic needs redesign.