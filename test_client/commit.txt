feat(TestClient): Implement Manager-Worker actor model and refactor TestResult pattern

## Summary
Implemented a comprehensive Manager-Worker actor model for parallel test execution and refactored the error handling pattern to use proper Rust Result<T, E> types.

## Key Changes

### 1. Manager-Worker Actor Model Implementation
- **ScenarioRunnerActor**: Manager actor that orchestrates multiple test scenarios
- **SingleScenarioActor**: Worker actor that handles individual test scenarios with two PlayerActors
- **Scenario struct**: Defines test scenarios with UUID for isolation and behavior configurations
- Added comprehensive message passing system between actors for coordination and result aggregation

### 2. TestResult Pattern Refactoring
- Refactored from custom `TestResult` enum to proper Rust `Result<BehaviorOutcome, TestFailure>` pattern
- **BehaviorOutcome**: Enum with Continue, Stop, Retry variants for successful behavior outcomes
- **TestFailure**: Enum with categorized failure types (Connection, Timeout, Protocol, Behavior, System)
- Updated all PlayerBehavior trait methods to return the new Result pattern

### 3. PlayerBehavior Updates
- Changed from `Arc<dyn PlayerBehavior>` to `Box<dyn PlayerBehavior>` for single ownership
- Added `clone_trait()` method to all behavior implementations for dynamic cloning
- Made all PlayerBehavior methods async for proper actor communication and Observer pattern integration

### 4. Behavior Implementation Updates
Updated all behavior implementations to use new Result pattern:
- **NormalPlayer**: Returns `Ok(BehaviorOutcome::Continue/Stop)` for normal flow
- **QuitDuringMatch/QuitDuringLoading**: Returns `Err(TestFailure::Behavior(...))` for intentional failures
- **SlowLoader**: Returns `Ok(BehaviorOutcome::Continue)` after delay simulation
- **SuddenDisconnect**: Returns `Err(TestFailure::Behavior(...))` for disconnect simulation
- **LoadingFailure/LoadingIgnorer**: Returns appropriate Result variants for loading test scenarios
- **IgnoreMatchFound**: Returns `Err(TestFailure::Behavior(...))` for match ignoring behavior

### 5. Actor Message Handling
- Updated PlayerActor handler to properly handle new Result<BehaviorOutcome, TestFailure> pattern
- Updated ScenarioActor handlers to work with new Result pattern for scenario completion detection
- Improved error handling and logging throughout the actor system

### 6. Code Quality Improvements
- Fixed all compilation errors and unused import warnings
- Added proper Debug traits to all relevant structs and enums
- Maintained async/await compatibility throughout the actor system
- Ensured proper ownership and borrowing patterns

## Files Modified
- `src/lib.rs`: Type definitions for BehaviorOutcome and TestResult
- `src/scenario_actor/mod.rs`: Core Manager-Worker actor implementation
- `src/scenario_actor/message.rs`: Inter-actor communication messages
- `src/scenario_actor/handler.rs`: Message handlers for actor coordination
- `src/player_actor/mod.rs`: Updated PlayerActor to use Box instead of Arc
- `src/player_actor/handler.rs`: Updated to handle new Result pattern
- `src/behaviors/mod.rs`: Updated PlayerBehavior trait and BehaviorType enum
- `src/behaviors/*.rs`: All individual behavior implementations updated

## Technical Benefits
- **Parallel Testing**: Multiple scenarios can now run concurrently with proper isolation
- **Better Error Handling**: Proper Rust Result<T, E> pattern provides clearer error semantics
- **Type Safety**: Improved compile-time safety with proper Result types
- **Actor Model**: Clean separation of concerns with Manager-Worker pattern
- **Extensibility**: Easy to add new test scenarios and behaviors

## Testing Status
- All code compiles successfully with no errors
- Ready for integration testing with match server
- Stream handler modifications left for user implementation as requested